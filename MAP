Front End Map
-------------

A color-coded map of the directory structure is available as
a pdf file, or Omnigraffle source file.

1. Lexing and Parsing
----------------------

  * syntax trees (AST) produced by parser
  * lexical analysis (via ML-Lex spec)
  * parsing (via ML-Yacc spec)

Parse/
  lexing and parsing, producing ast (concrete syntax trees)

  Parse/ast/
  "syntax trees" (really concrete, in contrast to absyn, which is
  the true abstract syntax)
    ast.sig/sml
      the syntax tree types
      defs: AST, Ast: AST
    astutil.sig/sml
      some utility functions
      defs: ASTUTIL, AstUtil: ASTUTIL
    ppast.sig/sml
      pretty printing Ast
      defs: PPAst: PPAST

  Parse/lex/
  lexical analysis (via ML-Lex)
    ml.lex
      the lexer spec (ML-Lex source)
    tokentable.sml
      hash table for token recognition
      defs: TokenTable

  Parse/parse/
  parsing (via ML-Yacc)
    ml.grm
      grammar spec (ML-Yacc source)

  Parse/main/
  control flags and parser driver functions.
  lexer/parser combination translates input stream into ast trees
    parser.sig/sml
      parser modules initialization, driver function
      defs: MLPARSER, MLParser: MLPARSER
    parsercontrol.sml
      flags controlling various syntax features
      defs: PARSER_CONTROL, ParserControl
    smlfile.sml
      top level parsing functions
      defs: SMLFILE, SmlFile


2. Elaboration
--------------

  * abstract syntax (absyn)
  * static environments
  * translation from ast to abstract syntax and static environment (elaboration)
  * core type checking and inference, overloading resolution
  * modules and signatures, signature matching, functor application
  * code found in directories ElabData, Elaborator

Basics/

  Basics/symbol/
  Symbol types involved in absyn and statenv and elaboration process
    symbol.sig/sml
      symbols (should be in ElabData)
      defs: Symbol: SYMBOL
    fastsymbol.sig/sml
      fast symbols (should be in ElabData)
      defs: FastSymbol: FASTSYMBOL
    fixity.sml
      fixity properties (should be in ElabData)
      defs: Fixity: FIXITY
    symbol-hashtable.sml
      Hashtables with symbol as key
      defs: SymbolHashTable
    specialsyms.sml
      definition of special symbols for internal use during elaboration
      defs: SpecialSymbols

  Basics/pid
    persistent stamps and persistent identifiers (pids)
    persstamps.sig/sml
      persistant stamps, or globally unique identifiers (16 byte vectors),
      aka "pids"
      defs: PERSSTAMPS, PersStamps : PERSSTAMPS
    persmap.sml
      finite maps over pids (persistent stamps)
      defs: PersMap
    pidenv.sig/sml
      environments using pids (persistant stamps) as keys
      defs: PIDENV, PidEnvFn

  Basics/compiler
    compileexn.sml
      Compile exception (where used?)
      defs: CompileExn
    endianness-big.sml
      Defines bigEndian flag (true)
      defs: Endianess
    endianness-little.sml
      Defines bigEndian flag (false)
      defs: Endianess
    target.sig
      Defines target attributes (e.g. sizes)
      defs: TARGET
    target32.sml
      Defines 32-bit target attributes
      defs: Target: TARGET
    target64.sml
      Defines 64-bit target attributes
      defs: Target: TARGET
    int-const.sml
      A common representation of typed integer literals to use in
      intermediate representations (from Absyn to CPS).
      defs: IntConst
    real-const.sml
      A common representation of typed real literals to use in
      intermediate representations (from Absyn to CPS).
      defs: RealConst

  Basics/util/
    wordstr-hashtable.sml
      word * string hash table
      [may be redundant with IntStrMapV defined in
       Env (ElabData/basics/env.sml)]
      defs: WordSringHashTable
      used: ElabData/types/tuples.sml, Parse/lex/tokentable.sml
      see: ElabData/basics/env.sml

  Basics/errormsg/
  error message machinery (depends oun Basics/source)
    errormsg.sig/sml
      error messages
      defs: ErrorMsg: ERRORMSG

  Basics/source/
  managing ML source files or streams
    pathnames.sig/sml
      file path names
      defs: Pathnames: PATHNAMES
    source.sig/sml
      input source datastructure
      defs: Source: SOURCE
    sourcemap.sig/sml
      map character positions in source to line no/column supporting #line "declaration"
      defs: SourceMap: SOURCE_MAP

  Basics/print/
  utilities for prettyprinting
    prettyprint.sml
      extend smlnj-lib/PP prettyprinter interface to match old one
      defs: PrettyPrint: PRETTYPRINT
    printutil.sig/sml
      some simple, non-pretty-printing print/formatting utility functions
      defs: PrintUtil: PRINTUTIL
      uses: Symbol, SYMBOL
      see: Elaborator/print/pputil.{sig,sml} for pretty printing versions
    printcontrol.sml
      print control flags, out, say
      defs: PRINTCONTROL, Control_Print
    pputil.sig/sml
      prettyprint utilities (generic)
      defs: PPUtil: PPUTIL

  Basics/stats/
    stats.sml
      facilities for defining timed phases
      defs: STATS, Stats

  Basics/main/  (* rename: name -> control *)
    basiccontrol.sml
      printWarning control flag, topregistry
      uses: ControlRegistry, Controls
      defs: BASIC_CONTROL, BasicControl


============================================================================

Catalog of basic structures (Front End)
---------------------------------------

symbols
  Symbol         (Basics/mlcomp/symbol.sig,sml)
  FastSymbol     (Basics/mlcomp/fastsymbol.sig,sml)

ast (syntax trees)
  Ast            (Parse/ast/ast.sig,sml)
  AstUtil        (Parse/ast/astutil.sig,sml)
